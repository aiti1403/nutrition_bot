from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from database.database import register_user, is_user_paid
from utils.states import SurveyStates, AdminStates
from keyboards.survey_kb import get_question_1_kb, get_admin_kb, get_payment_kb

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await register_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–≤–æ–∏–º–∏ –ø–∏—â–µ–≤—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /survey"
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ–ø—Ä–æ—Å–∞
    await state.clear()

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/survey - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
        "/admin - –í–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/payment - –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_password)

@router.message(Command("payment"))
async def cmd_payment(message: Message):
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    """
    is_paid = await is_user_paid(message.from_user.id)
    
    if is_paid:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    else:
        await message.answer(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–∏—Ç–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 1000 —Ä—É–±.\n\n"
            "–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–æ—Å—É –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
            "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n",
            reply_markup=get_payment_kb()
        )
    """
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã
    await message.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ.")

@router.message(Command("survey"))
async def cmd_survey(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø
    is_paid = await is_user_paid(message.from_user.id)
    
    if not is_paid:
        await message.answer(
            "–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /payment –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
        return
    """
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    await message.answer(
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –æ–ø—Ä–æ—Å –æ —Ç–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫ –ø–∏—Ç–∞–Ω–∏—é.\n\n"
        "–í–æ–ø—Ä–æ—Å 1: –Ø —Ö–æ—á—É –ø–æ–µ—Å—Ç—å:",
        reply_markup=get_question_1_kb()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(SurveyStates.question_1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    await state.update_data(answers={})

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    from aiogram.types import ReplyKeyboardRemove
    
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
